```
Author:     Phat Nguyen
Course:     ECE 3710 
Date:       08-24-2024  
Project:    ThunderBird Signal 
```

# Overview of the ThunderBird Signal

The finite state machine (FSM) control vehicle turn signals as the user can input a left, right, or harzard singal. When activated, the FSM will 
turn on certain LEDS to simulate a left turn, right turn, or hazard signal.

# Files that are included 

THe folllowing files that will be included in my submission are:
1. README.md
2. Finite State machine diagaram.pdf
3. ThunderBirdSignal.v
4. tb_ThunderBirdSignal.v
5. Clock_div.v
6. tb_Clock_Div.v
7. SixteenHEXSeg.v
8. ThunderbirdSignal_Toplevel.v
9. SimulationResult.pdf

# Results

When running the simulation, I have tested left turn, right turn, hazard, and turn signal interuption(hazard assert) cases. 
As a result, My fsm was able to produce the correct result when inputing a varitety of cases as shown in SimulationResult.pdf.
Creating test bench, I would insert individual inputs, wait 10 full cycles, and check the waveform to see if my fsm would repeat
sequences like the left,right, and hazard sequence. By doing so, the result from the simulation show that the fsm does complete a full
sequence and would repeat again until the input has been deasserted. As for turn signal interuption, I asserted a left turn signal for 20 full 
clk cycle. At the 10th cycle, I deaserted the left and activated the right input. By doing so, the fsm continue the left signal until after has 
reached to stage L3. Going to the right turn singal sequence, I asserted the hazard signal mid way. This resulted the in the fsm to go back 
and forth between the hazard and Neutral stage to turn all LEDS off and on alternately.


# Problems encoountered
Using Questa to simulate, I struggled with the timing of my inputs. Sometimes, my inputs would activate on the falling edge, which caused the
FSM to produce incorrect results. To fix this issue, I replaced all commands that used "# number;" with "repeat(#) @(posedge clk);". This change
not only made it easier to understand my testbench but also ensured that my inputs activated on the rising edge since the repeat syntax occurs on
the rising edge. Additionally, using repeat made the testbench easier to read, as I could think of it in terms of cycles rather than time.
I would like to point out that I used breakpoints in the simulation to identify when my FSM produced incorrect results. I also encountered
difficulties sending my Verilog code to the FPGA because the Ethernet blaster was not recognized by the computer. I had to spend hours resetting
the FPGA, replugging the blaster multiple times, and ensuring the computer recognized it. Eventually, after adjusting the computer settings,
I was able to send my code to the FPGA.


# NOTE: 
I used CHATGPT to improve my writing by checking grammar, spelling, and flow of sentences.
